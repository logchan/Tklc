using System.Text;
using NUnit.Framework;
using Tklc.Cryptography;
using Tklc.Framework.Extensions;

namespace Tklc.Tests.Cryptography {
    public class ScryptTests {
        [Test]
        public void Test1() {
            var key = Scrypt.Derive("pleaseletmein", Encoding.UTF8.GetBytes("SodiumChloride"), 16, 8, 1, 64);
            var result = new byte[] {
                0x25, 0xa9, 0xfa, 0x20, 0x7f, 0x87, 0xca, 0x09,
                0xa4, 0xef, 0x8b, 0x9f, 0x77, 0x7a, 0xca, 0x16,
                0xbe, 0xb7, 0x84, 0xae, 0x18, 0x30, 0xbf, 0xbf,
                0xd3, 0x83, 0x25, 0xaa, 0xbb, 0x93, 0x77, 0xdf,
                0x1b, 0xa7, 0x84, 0xd7, 0x46, 0xea, 0x27, 0x3b,
                0xf5, 0x16, 0xa4, 0x6f, 0xbf, 0xac, 0xf5, 0x11,
                0xc5, 0xbe, 0xba, 0x4c, 0x4a, 0xb3, 0xac, 0xc7,
                0xfa, 0x6f, 0x46, 0x0b, 0x6c, 0x0f, 0x47, 0x7b
            };

            Assert.AreEqual(result.ToHexString(), key.ToHexString());
        }

        [Test]
        public void TestForProfiling() {
            var key = Scrypt.Derive("something,something,something", Encoding.UTF8.GetBytes("this is a salt"), 1048576, 8, 1, 32);

            Assert.AreEqual(32, key.Length);
        }

        /*
        [Test]
        public void TestSalsa8() {
            var input = new byte[] {
                0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
                0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
                0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
                0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29, 0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e
            };
            var result = new byte[] {
                0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c, 0xef, 0x05,
                0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63, 0x96, 0x68, 0x2f, 0x29,
                0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b, 0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba,
                0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c, 0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81
            };

            var decoded = Decode(input);
            Scrypt.Salsa8(decoded);

            Assert.AreEqual(result.ToHexString(), Encode(decoded).ToHexString());
        }

        [Test]
        public void TestMixSalsa8() {
            var b0 = new byte[] {
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7
            };

            var b1 = new byte[] {
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89,
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
            };

            var b0Result = new byte[] {
                0xc6, 0x1b, 0x42, 0x74, 0x6f, 0xc2, 0xb4, 0x23, 0x33, 0x7a, 0x0e, 0x51, 0xc9, 0x28, 0x76, 0x77,
                0xc6, 0x4d, 0x9d, 0xee, 0xb4, 0x58, 0x8f, 0x3b, 0x4e, 0xc5, 0x6b, 0xc1, 0xf7, 0xfb, 0x0b, 0xc0,
                0x1c, 0x80, 0x7e, 0x10, 0xcb, 0x53, 0xbc, 0x3a, 0x10, 0xb7, 0x1e, 0x3f, 0xf6, 0x40, 0xa7, 0x5c,
                0x66, 0xcc, 0x46, 0xae, 0x20, 0xfe, 0x29, 0x46, 0x95, 0x79, 0xf4, 0x6f, 0x11, 0xba, 0xe6, 0x2e,
                0x12, 0xe8, 0x0f, 0x10, 0xb6, 0xf1, 0xc6, 0x0c, 0x0e, 0xa9, 0x22, 0x67, 0x69, 0xf8, 0x81, 0xca,
                0x26, 0xb8, 0xf9, 0x92, 0x42, 0x9d, 0x7e, 0xe5, 0xef, 0x21, 0x4d, 0xf4, 0x9d, 0xd3, 0x5e, 0x8b,
                0x88, 0x70, 0x0a, 0xee, 0xdd, 0x57, 0x08, 0x24, 0xc0, 0x4c, 0x4a, 0x8b, 0x64, 0x14, 0x16, 0x9a,
                0x88, 0x91, 0x53, 0x97, 0x77, 0xe1, 0xf4, 0x10, 0xae, 0x3a, 0x3c, 0x46, 0x40, 0x9b, 0xb9, 0xc3
            };

            var b1Result = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x42, 0xa1, 0x95, 0x52, 0x2a, 0x04, 0x15, 0x1e, 0xde, 0x55, 0x93, 0x1b, 0x44, 0x95, 0x0e, 0x5e,
                0xed, 0x1f, 0x11, 0x67, 0xcb, 0x0c, 0x39, 0xae, 0x37, 0xd8, 0x14, 0xac, 0x1d, 0xb1, 0xa0, 0xc8,
                0xae, 0x5f, 0xdd, 0xcf, 0x15, 0xa0, 0x84, 0xce, 0xab, 0xce, 0xc1, 0x82, 0x81, 0x83, 0x19, 0xc2,
                0x94, 0x9a, 0x1e, 0x7a, 0x2a, 0xa6, 0x72, 0x32, 0x85, 0xcb, 0x06, 0x14, 0x28, 0x53, 0x9c, 0x50
            };

            var x = Decode(b0);
            var y = Decode(b1);
            Scrypt.MixSalsa8(x, y, 1);
            Scrypt.MixSalsa8(y, x, 1);

            Assert.AreEqual(b0Result.ToHexString(), Encode(x).ToHexString());
            Assert.AreEqual(b1Result.ToHexString(), Encode(y).ToHexString());
        }

        [Test]
        public void TestMix() {
            var bIn = new byte[] {
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
            };
            var bResult = new byte[] {
                0x79, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca, 0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b, 0xf6, 0xb6,
                0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55, 0xfa, 0xfc, 0x61, 0x98, 0xe6, 0xea, 0x2b, 0x46,
                0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29, 0xd6, 0x65, 0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26,
                0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f, 0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71,
                0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a, 0x26, 0x6f, 0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c,
                0xac, 0x0b, 0x9c, 0xf1, 0xbe, 0x2b, 0xff, 0xca, 0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4,
                0xae, 0x12, 0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0, 0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
                0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68, 0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a, 0x4b, 0x8e
            };

            Scrypt.Mix(bIn, 1, 16);
            Assert.AreEqual(bResult.ToHexString(), bIn.ToHexString());
        }

        [Test]
        public static void TestIntegerify() {
            var bIn = new byte[] {
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
            };
            var result = 2502615399432014217L;

            var x = Decode(bIn);
            var l = Scrypt.Integerify(x);
            Assert.AreEqual(result, l);
        }

        private static uint[] Decode(byte[] input) {
            var data = new uint[input.Length / 4];
            for (var i = 0; i < data.Length; ++i) {
                data[i] = Scrypt.Le32Dec(input, i * 4);
            }

            return data;
        }

        private static byte[] Encode(uint[] input) {
            var data = new byte[input.Length * 4];
            for (var i = 0; i < input.Length; ++i) {
                Scrypt.Le32Enc(input[i], data, i * 4);
            }

            return data;
        }
        */
    }
}