using System.Runtime.Intrinsics;
using System.Security.Cryptography;
using System.Text;
using NUnit.Framework;
using Tklc.Cryptography;
using Tklc.Framework.Extensions;

namespace Tklc.Tests.Cryptography.NetCoreApp30 {
    public class ScryptSseTests {

        [Test]
        public void Test1() {
            var key = ScryptSse.Derive("pleaseletmein", Encoding.UTF8.GetBytes("SodiumChloride"), 16, 8, 1, 64);
            var result = new byte[] {
                0x25, 0xa9, 0xfa, 0x20, 0x7f, 0x87, 0xca, 0x09,
                0xa4, 0xef, 0x8b, 0x9f, 0x77, 0x7a, 0xca, 0x16,
                0xbe, 0xb7, 0x84, 0xae, 0x18, 0x30, 0xbf, 0xbf,
                0xd3, 0x83, 0x25, 0xaa, 0xbb, 0x93, 0x77, 0xdf,
                0x1b, 0xa7, 0x84, 0xd7, 0x46, 0xea, 0x27, 0x3b,
                0xf5, 0x16, 0xa4, 0x6f, 0xbf, 0xac, 0xf5, 0x11,
                0xc5, 0xbe, 0xba, 0x4c, 0x4a, 0xb3, 0xac, 0xc7,
                0xfa, 0x6f, 0x46, 0x0b, 0x6c, 0x0f, 0x47, 0x7b
            };

            Assert.AreEqual(result.ToHexString(), key.ToHexString());
        }

        [Test]
        public void Test2() {
            var password = "to test if two versions produce the same thing";
            var salt = new byte[64];
            var rng = RandomNumberGenerator.Create();
            rng.GetNonZeroBytes(salt);
            for (var a = 4; a < 10; ++a) {
                var sseKey = ScryptSse.Derive(password, salt, 1 << a, 8, 1, 64);
                var scryptKey = Scrypt.Derive(password, salt, 1 << a, 8, 1, 64);

                Assert.AreEqual(scryptKey.ToHexString(), sseKey.ToHexString());
            }
        }

/*
        [Test]
        public static void TestIntegerify() {
            var bIn = new byte[] {
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
            };
            var result = 15725534615241312649L;

            var x = ConvertToVector128(Decode(bIn));
            var l = ScryptSse.Integerify(x, 1);
            Assert.AreEqual(result, l);
        }

        [Test]
        public void TestMixSalsa8() {
            var b0 = new byte[] {
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7,
                0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12, 0xff, 0xdd,
                0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae, 0x2d, 0x0f, 0x6f, 0xad,
                0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b, 0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29,
                0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3, 0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7
            };

            var b1 = new byte[] {
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89,
                0x89, 0x49, 0x91, 0x44, 0x72, 0x13, 0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb,
                0xcd, 0x98, 0x43, 0x80, 0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0,
                0x67, 0xd2, 0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
                0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf, 0x7e, 0x89
            };

            var b0Result = new byte[] {
                0xcc, 0x0c, 0x42, 0xb8, 0x71, 0x20, 0x27, 0xdc, 0xcc, 0x89, 0x24, 0x8b, 0xe2, 0xed, 0xb8, 0x2c,
                0xb5, 0x91, 0x68, 0xcc, 0xc5, 0x28, 0xc1, 0x9e, 0x9b, 0xe1, 0xec, 0xe9, 0xb7, 0x59, 0xb1, 0xa7,
                0xe8, 0x0c, 0xa6, 0x56, 0xe4, 0x68, 0x53, 0xbc, 0xa6, 0x6e, 0x1b, 0x29, 0x02, 0xe9, 0xd5, 0xd9,
                0xe4, 0x6b, 0x61, 0xf2, 0xca, 0x6c, 0xeb, 0x23, 0x5b, 0x60, 0x1a, 0x79, 0x1d, 0x23, 0xdc, 0x08,
                0x9e, 0x65, 0x33, 0xbf, 0x07, 0xcb, 0xac, 0xc1, 0xbc, 0x1b, 0x26, 0xd9, 0xd2, 0xc4, 0xa1, 0x47,
                0x6a, 0xbc, 0xe3, 0x30, 0xdc, 0x2a, 0x28, 0x6b, 0xdc, 0xeb, 0xd5, 0x95, 0xf5, 0x46, 0xea, 0xe1,
                0x6d, 0x92, 0xe5, 0xc4, 0x51, 0xb8, 0x1c, 0x6b, 0x0b, 0x0b, 0xb7, 0x87, 0x41, 0x41, 0x21, 0x13,
                0x88, 0xda, 0x03, 0xb3, 0x90, 0xfb, 0x44, 0xf7, 0xee, 0x1b, 0x49, 0x59, 0x30, 0xfc, 0x9e, 0x7c
            };

            var b1Result = new byte[] {
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x44, 0xb2, 0x4e, 0xeb, 0x9d, 0xe0, 0x75, 0xd4, 0x22, 0xbe, 0x05, 0x65, 0x2e, 0xfe, 0x99, 0x8a,
                0x79, 0x33, 0xd4, 0x6f, 0x08, 0x0f, 0x42, 0x71, 0xa3, 0xbe, 0xfc, 0xcd, 0xfe, 0xc7, 0x95, 0xab,
                0x55, 0x0d, 0xbc, 0xf4, 0xf8, 0x7f, 0xda, 0x5c, 0x63, 0xb1, 0xe9, 0xbf, 0x60, 0xd4, 0x7e, 0xf9,
                0x86, 0xfe, 0xfd, 0x43, 0xf9, 0x28, 0xaa, 0x70, 0x85, 0x3a, 0xb7, 0x80, 0x15, 0xfd, 0xef, 0x8b
            };

            var x = Decode(b0);
            var y = Decode(b1);
            var xVec = ConvertToVector128(x);
            var yVec = ConvertToVector128(y);
            ScryptSse.MixSalsa8Sse2(xVec, yVec, 1);
            ScryptSse.MixSalsa8Sse2(yVec, xVec, 1);

            Assert.AreEqual(b0Result.ToHexString(), Encode(ConvertFromVector128(xVec)).ToHexString());
            Assert.AreEqual(b1Result.ToHexString(), Encode(ConvertFromVector128(yVec)).ToHexString());
        }

        [Test]
        public void TestSalsaSse2() {
            var input = new byte[] {
                0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71, 0x8f, 0x26,
                0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11, 0x6d, 0xcd, 0x3b, 0x1d,
                0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12, 0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32,
                0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29, 0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e
            };
            var result = new byte[] {
                0x0d, 0x46, 0xb2, 0xd1, 0x89, 0xc5, 0xa9, 0x18, 0x14, 0x7e, 0xe6, 0x5e, 0xbc, 0x2a, 0xa4, 0xfc,
                0xe8, 0x39, 0x0d, 0x18, 0xb8, 0x59, 0x3f, 0x11, 0x6e, 0x96, 0x73, 0x23, 0xcc, 0x54, 0x0d, 0x03,
                0x53, 0xa1, 0x69, 0x77, 0x5a, 0x60, 0x33, 0xeb, 0xcf, 0x66, 0x1c, 0x67, 0xc6, 0xfd, 0x9c, 0xf3,
                0xfe, 0xb9, 0x78, 0x4b, 0xc8, 0xa3, 0x3e, 0xfb, 0x62, 0xad, 0xb2, 0xef, 0x37, 0x92, 0x99, 0x4d
            };

            var decoded = Decode(input);
            var vec = ConvertToVector128(decoded);
            ScryptSse.Salsa8Sse2(vec);

            Assert.AreEqual(result.ToHexString(), Encode(ConvertFromVector128(vec)).ToHexString());
        }
        */
        private static uint[] ConvertFromVector128(Vector128<uint>[] data) {
            var arr = new uint[data.Length * 4];
            for (var i = 0; i < data.Length; ++i) {
                for (var j = 0; j < 4; ++j) {
                    arr[i * 4 + j] = data[i].GetElement(j);
                }
            }

            return arr;
        }

        private static Vector128<uint>[] ConvertToVector128(uint[] data) {
            var arr = new Vector128<uint>[data.Length / 4];
            for (var i = 0; i < arr.Length; ++i) {
                arr[i] = Vector128.Create(data[i*4], data[i*4+1], data[i*4+2], data[i*4+3]);
            }

            return arr;
        }

        private static uint[] Decode(byte[] input) {
            var data = new uint[input.Length / 4];
            for (var i = 0; i < data.Length; ++i) {
                data[i] = Le32Dec(input, i * 4);
            }

            return data;
        }

        private static byte[] Encode(uint[] input) {
            var data = new byte[input.Length * 4];
            for (var i = 0; i < input.Length; ++i) {
                Le32Enc(input[i], data, i * 4);
            }

            return data;
        }

        private static uint Le32Dec(byte[] data, int offset) {
            return data[offset] +
                   ((uint) data[offset + 1] << 8) +
                   ((uint) data[offset + 2] << 16) +
                   ((uint) data[offset + 3] << 24);
        }

        private static void Le32Enc(uint n, byte[] data, int offset) {
            data[offset] = (byte) (n & 0xFF);
            data[offset + 1] = (byte) ((n >> 8) & 0xFF);
            data[offset + 2] = (byte) ((n >> 16) & 0xFF);
            data[offset + 3] = (byte) ((n >> 24) & 0xFF);
        }
    }
}